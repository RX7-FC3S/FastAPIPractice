from datetime import datetime
from sqlmodel import Session, select

from enum import Enum
from sqlmodel import Field, Relationship
from common.model import DataModelBase


class ContentType(Enum):
    TEXT = "TEXT"  # str or int
    DATE = "DATE"  # 241231 / 20241231
    TIME = "TIME"  # 1230 / 123001
    AUTO_GENERATED_NUMBER = "AUTO_GENERATED_NUMBER"  # 001,002,...00n


class AutoGeneratedNumberHeader(DataModelBase, table=True):
    __tablename__: str = "auto_generated_number_headers"

    identifier: str = Field(max_length=32, unique=True)

    prefix: str = Field(max_length=16)
    suffix: str = Field(nullable=True, max_length=16)

    auto_generated_number_details: list["AutoGeneratedNumberDetail"] = Relationship()


class AutoGeneratedNumberDetail(DataModelBase, table=True):
    __tablename__: str = "auto_generated_number_details"
    auto_generated_number_header_id: int = Field(foreign_key="auto_generated_number_headers.id")
    auto_generated_number_header: AutoGeneratedNumberHeader = Relationship(
        back_populates="auto_generated_number_details"
    )
    content_type: ContentType
    digits: int
    sequence: int
    initial_value: str
    current_value: str


def get_agn_header_by_identifier(db: Session, identifier: str):
    return db.exec(select(AutoGeneratedNumberHeader).where(AutoGeneratedNumberHeader.identifier == identifier)).all()


def generate(db: Session, identifier: str):
    agn_header = get_agn_header_by_identifier(db, identifier)[0]
    agn_config = agn_header.auto_generated_number_details
    agn_config = sorted(agn_config, key=lambda i: i.sequence)
    content = []
    for item in agn_config:
        item_content = str()
        if item.content_type == ContentType.DATE:
            item_content = datetime.now().strftime("%Y%m%d")[-int(item.digits) :]
        if item.content_type == ContentType.TIME:
            item_content = datetime.now().strftime("%H%M%S")[-int(item.digits) :]
        if item.content_type == ContentType.AUTO_GENERATED_NUMBER:
            item.current_value = item_content = str(int(item.current_value) + 1).zfill(item.digits)
            db.add(item)
            db.commit()

        content.append(item_content)
    return agn_header.prefix + "".join(content) + (agn_header.suffix if agn_header.suffix else str())
